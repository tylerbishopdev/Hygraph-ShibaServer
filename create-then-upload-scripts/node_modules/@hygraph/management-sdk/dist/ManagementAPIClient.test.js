"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const nock_1 = __importDefault(require("nock"));
const ManagementAPIClient_1 = require("./ManagementAPIClient");
(0, ava_1.default)("should return an error in case the mgmt api returns an error", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .replyWithError("something awful happened");
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.throwsAsync(client.getEnvironmentInfo(), {
        instanceOf: Error,
        message: "Could not get endpoint information: request to http://localhost:3001/graphql failed, reason: something awful happened",
    });
    scope.done();
}));
(0, ava_1.default)("should return the environment id if the contentApiEndpoint exists", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, {
        data: {
            viewer: {
                projects: [
                    {
                        id: "123",
                        environments: [
                            {
                                id: "456",
                                name: "master",
                                endpoint: "http://localhost:5555/v2/123/master",
                            },
                        ],
                    },
                ],
            },
        },
    });
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.notThrowsAsync(client.getEnvironmentInfo().then((info) => {
        t.is(info === null || info === void 0 ? void 0 : info.environmentId, "456");
        t.is(info === null || info === void 0 ? void 0 : info.environmentName, "master");
        t.is(info === null || info === void 0 ? void 0 : info.projectId, "123");
    }));
    scope.done();
}));
(0, ava_1.default)("should return an error if the contentApiEndpoint does not exist", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, {
        data: {
            viewer: {
                projects: [
                    {
                        id: "123",
                        environments: [
                            {
                                id: "456",
                                name: "master",
                                endpoint: "http://localhost:5555/v2/???/master",
                            },
                        ],
                    },
                ],
            },
        },
    });
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.throwsAsync(client.getEnvironmentInfo(), {
        instanceOf: Error,
        message: "Could not find environment",
    });
    scope.done();
}));
(0, ava_1.default)("should submit a list of migrations", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const createdAt = new Date();
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, {
        data: {
            submitBatchChanges: {
                migration: {
                    id: "123",
                    createdAt,
                    finishedAt: null,
                    status: "PENDING",
                    errors: null,
                },
            },
        },
    });
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.notThrowsAsync(client
        .submit({
        data: {
            changes: [
                {
                    createModel: {
                        apiId: "Post",
                        apiIdPlural: "Posts",
                        displayName: "Post",
                        description: "Classic Post model",
                    },
                },
            ],
            environmentId: "123",
            name: "my migration",
        },
    })
        .then((response) => {
        t.deepEqual(response, {
            status: "PENDING",
            id: "123",
            createdAt: createdAt.toISOString(),
            errors: null,
            finishedAt: null,
        });
    }));
    scope.done();
}));
(0, ava_1.default)("should return an error when the management api call fails on submit", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .replyWithError("Something went horrible wrong");
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.throwsAsync(client.submit({
        data: {
            changes: [
                {
                    createModel: {
                        apiId: "Post",
                        apiIdPlural: "Posts",
                        displayName: "Post",
                        description: "Classic Post model",
                    },
                },
            ],
            environmentId: "123",
            name: "my migration",
        },
    }), {
        instanceOf: Error,
        message: "Could not submit migration: request to http://localhost:3001/graphql failed, reason: Something went horrible wrong",
    });
    scope.done();
}));
(0, ava_1.default)("should return an error when the management api call fails on getEnvironmentDiff", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, {
        data: {
            viewer: {
                projects: [
                    {
                        id: "123",
                        environments: [
                            {
                                id: "456",
                                name: "master",
                                endpoint: "http://localhost:5555/v2/123/master",
                            },
                        ],
                    },
                ],
            },
        },
    });
    const envDiffNock = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql", /getEnvironmentDiff/)
        .replyWithError("Something went horrible wrong while getting diff");
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.throwsAsync(client.getEnvironmentDiff("other-env"), {
        instanceOf: Error,
        message: "Could not get diff: request to http://localhost:3001/graphql failed, reason: Something went horrible wrong while getting diff",
    });
    scope.done();
    envDiffNock.done();
}));
(0, ava_1.default)("should get environment diff", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, {
        data: {
            viewer: {
                projects: [
                    {
                        id: "123",
                        environments: [
                            {
                                id: "456",
                                name: "master",
                                endpoint: "http://localhost:5555/v2/123/master",
                            },
                        ],
                    },
                ],
            },
        },
    });
    const envDiffNock = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql", /getEnvironmentDiff/)
        .reply(200, {
        data: {
            viewer: {
                project: {
                    environment: {
                        diff: {
                            changes: {
                                createModel: {
                                    apiId: "Demo",
                                    apiIdPlural: "Demos",
                                },
                            },
                        },
                    },
                },
            },
        },
    });
    const client = new ManagementAPIClient_1.ManagementAPIClient("http://localhost:5555/v2/123/master", "http://localhost:3001/graphql", "myToken");
    yield t.notThrowsAsync(client.getEnvironmentDiff("other-env").then((response) => {
        t.like(response, {
            createModel: {
                apiId: "Demo",
                apiIdPlural: "Demos",
            },
        });
    }));
    scope.done();
    envDiffNock.done();
}));
//# sourceMappingURL=ManagementAPIClient.test.js.map