"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementAPIClient = void 0;
const mgmtServerTypes_1 = require("./mgmtServerTypes");
const graphql_request_1 = require("graphql-request");
const environmentInfoQuery = `
  {
    viewer {
      ... on TokenViewer {
        project {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
      
      ... on UserViewer {
        projects {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
      
      ... on AppTokenViewer {
        project {
          id
          environments {
            id
            name
            endpoint
          }
        }
      }
    }
  }
`;
const environmentDiffQuery = `
  query getEnvironmentDiff($projectId: ID!, $environmentName: String!, $otherEnvironmentName: String!) {
    viewer {
      project(id: $projectId) {
        environment(name: $environmentName) {
          diff(environmentName: $otherEnvironmentName) {
            changes
          }
        }
      }
    }
  }
`;
const submitMutation = `
  mutation submitBatch($data: BatchMigrationInput!) {
    submitBatchChanges(data: $data) {
      migration {
        id
        createdAt
        finishedAt
        status
        errors
      }
    }
  }
`;
const fetchMigrationQuery = `
  query fetchMigration($projectId: ID!, $environmentName: String!, $migrationId: ID!){
    viewer {
      project(id: $projectId) {
        environment(name: $environmentName) {
          migration(id: $migrationId) {
            id
            status
            errors
            createdAt
            finishedAt
          }
        }
      }
    }
  }
`;
class ManagementAPIClient {
    constructor(contentApiEndpoint, mgmtApiEndpoint, authToken) {
        this.contentApiEndpoint = contentApiEndpoint;
        /**
         * Returns the environment info by fetching all envs and filtering those for the given endpoint
         */
        this.getEnvironmentInfo = () => __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.client.request(environmentInfoQuery, {});
                const { viewer } = response;
                if (!viewer) {
                    return Promise.reject(new Error("Could not find environment"));
                }
                if (viewer.projects) {
                    for (const p of viewer.projects) {
                        for (const environment of p.environments) {
                            if (environment.endpoint === this.contentApiEndpoint) {
                                return {
                                    environmentId: environment.id,
                                    environmentName: environment.name,
                                    projectId: p.id,
                                };
                            }
                        }
                    }
                }
                else if (viewer.project) {
                    for (const environment of viewer.project.environments) {
                        if (environment.endpoint === this.contentApiEndpoint) {
                            return {
                                environmentId: environment.id,
                                environmentName: environment.name,
                                projectId: viewer.project.id,
                            };
                        }
                    }
                }
                return Promise.reject(new Error("Could not find environment"));
            }
            catch (err) {
                if (err instanceof Error) {
                    return Promise.reject(new Error(`Could not get endpoint information: ${err.message}`));
                }
                else {
                    return Promise.reject(new Error(`Unknown error while getting endpoint information:`));
                }
            }
        });
        /**
         * Submits a set of batch changes
         * @param variables
         */
        this.submit = (variables) => __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.client.request(submitMutation, variables);
                return response.submitBatchChanges.migration;
            }
            catch (err) {
                if (err instanceof Error) {
                    return Promise.reject(new Error(`Could not submit migration: ${err.message}`));
                }
                else {
                    return Promise.reject(new Error("Unknown error while submitting changes"));
                }
            }
        });
        this.fetchMigration = (client, args) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c;
            try {
                const res = yield client.request(fetchMigrationQuery, {
                    migrationId: args.migrationId,
                    environmentName: args.environmentName,
                    projectId: args.projectId,
                });
                const migration = (_c = (_b = (_a = res === null || res === void 0 ? void 0 : res.viewer) === null || _a === void 0 ? void 0 : _a.project) === null || _b === void 0 ? void 0 : _b.environment) === null || _c === void 0 ? void 0 : _c.migration;
                if (!migration) {
                    return Promise.reject(new Error(`Could not find migration with id '${args.migrationId}'`));
                }
                return migration;
            }
            catch (e) {
                if (e instanceof Error) {
                    return Promise.reject(e);
                }
                else {
                    return Promise.reject(new Error("Unknown error occurred"));
                }
            }
        });
        this.client = new graphql_request_1.GraphQLClient(mgmtApiEndpoint, {
            headers: {
                Authorization: `Bearer ${authToken}`,
                "apollographql-client-name": "management-sdk",
            },
        });
    }
    pollMigrationStatus(params) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                try {
                    yield new Promise((resolve) => setTimeout(resolve, 1000));
                    const migration = yield this.fetchMigration(this.client, {
                        projectId: params.projectId,
                        environmentName: params.environmentName,
                        migrationId: params.migrationId,
                    });
                    if (migration.status !== mgmtServerTypes_1.MigrationStatus.Queued &&
                        migration.status !== mgmtServerTypes_1.MigrationStatus.Running) {
                        return migration;
                    }
                }
                catch (e) {
                    return Promise.reject(e);
                }
            }
        });
    }
    getEnvironmentDiff(otherEnvironmentName) {
        return __awaiter(this, void 0, void 0, function* () {
            let info;
            try {
                info = yield this.getEnvironmentInfo();
            }
            catch (e) {
                return Promise.reject(e);
            }
            try {
                const response = yield this.client.request(environmentDiffQuery, {
                    projectId: info === null || info === void 0 ? void 0 : info.projectId,
                    environmentName: info === null || info === void 0 ? void 0 : info.environmentName,
                    otherEnvironmentName,
                });
                const viewerDiff = response;
                if (viewerDiff.viewer === undefined) {
                    return Promise.reject(new Error("Could not get diff"));
                }
                return viewerDiff === null || viewerDiff === void 0 ? void 0 : viewerDiff.viewer.project.environment.diff.changes;
            }
            catch (err) {
                if (err instanceof Error) {
                    return Promise.reject(new Error(`Could not get diff: ${err.message}`));
                }
                else {
                    return Promise.reject(new Error("Unknown error while getting diff"));
                }
            }
        });
    }
}
exports.ManagementAPIClient = ManagementAPIClient;
//# sourceMappingURL=ManagementAPIClient.js.map