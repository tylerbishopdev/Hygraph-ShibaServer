"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const ManagementAPIClient_1 = require("./ManagementAPIClient");
class Client {
    constructor(params) {
        this.wasExecuted = false;
        this.scheduledMigrations = [];
        this.endpoint = params.endpoint;
        this.authToken = params.authToken;
        this.name = params.name;
    }
    /**
     * creates a new model
     * @param data.apiId -  The model apiId
     * @param data.apiIdPlural -  The models plural apiId. This is used for lists
     * @param data.displayName -  Display name that is used to render the model in the webapp
     * @param data.description -  Optional description of the model
     * @param data.isSystem -  Only AppTokens should provide this flag
     */
    createModel(data) {
        this.scheduledMigrations.push({ operationName: "createModel", params: data });
    }
    /** */
    updateModel(data) {
        this.scheduledMigrations.push({ operationName: "updateModel", params: data });
    }
    /** */
    deleteModel(data) {
        this.scheduledMigrations.push({ operationName: "deleteModel", params: data });
    }
    /** */
    createComponent(data) {
        this.scheduledMigrations.push({ operationName: "createComponent", params: data });
    }
    /** */
    updateComponent(data) {
        this.scheduledMigrations.push({ operationName: "updateComponent", params: data });
    }
    /** */
    deleteComponent(data) {
        this.scheduledMigrations.push({ operationName: "deleteComponent", params: data });
    }
    /** */
    createSimpleField(data) {
        this.scheduledMigrations.push({ operationName: "createSimpleField", params: data });
    }
    /** */
    updateSimpleField(data) {
        this.scheduledMigrations.push({ operationName: "updateSimpleField", params: data });
    }
    /** */
    createRemoteField(data) {
        this.scheduledMigrations.push({ operationName: "createRemoteField", params: data });
    }
    /** */
    updateRemoteField(data) {
        this.scheduledMigrations.push({ operationName: "updateRemoteField", params: data });
    }
    /**
     * @param data.isRequired -
     *    * Marks the field as required.
     *    * Note: This is only supported for RelationFieldType ASSET!
     *
     */
    createRelationalField(data) {
        this.scheduledMigrations.push({ operationName: "createRelationalField", params: data });
    }
    /**
     * @param data.isRequired -
     *    * Marks the field as required.
     *    * Note: This is only supported for RelationFieldType ASSET!
     *
     */
    updateRelationalField(data) {
        this.scheduledMigrations.push({ operationName: "updateRelationalField", params: data });
    }
    /** */
    createUnionField(data) {
        this.scheduledMigrations.push({ operationName: "createUnionField", params: data });
    }
    /** */
    updateUnionField(data) {
        this.scheduledMigrations.push({ operationName: "updateUnionField", params: data });
    }
    /** */
    createComponentField(data) {
        this.scheduledMigrations.push({ operationName: "createComponentField", params: data });
    }
    /** */
    updateComponentField(data) {
        this.scheduledMigrations.push({ operationName: "updateComponentField", params: data });
    }
    /** */
    createComponentUnionField(data) {
        this.scheduledMigrations.push({ operationName: "createComponentUnionField", params: data });
    }
    /** */
    updateComponentUnionField(data) {
        this.scheduledMigrations.push({ operationName: "updateComponentUnionField", params: data });
    }
    /** */
    createEnumerableField(data) {
        this.scheduledMigrations.push({ operationName: "createEnumerableField", params: data });
    }
    /** */
    updateEnumerableField(data) {
        this.scheduledMigrations.push({ operationName: "updateEnumerableField", params: data });
    }
    /** */
    deleteField(data) {
        this.scheduledMigrations.push({ operationName: "deleteField", params: data });
    }
    /**
     * @param data.modelApiId -  Api Id of the model associated with the custom sidebar element
     * @param data.displayName -  Display name for the sidebar element
     * @param data.description -  Description name for the sidebar element
     * @param data.config -  Json metadata associated with the sidebar element
     * @param data.appElementApiId -  Api Id of the App element to create custom sidebar element with
     * @param data.appApiId -  Api Id of the App
     */
    createCustomSidebarElement(data) {
        this.scheduledMigrations.push({ operationName: "createCustomSidebarElement", params: data });
    }
    /**
     * @param data.appApiId -  Api Id of the App
     * @param data.appElementApiId -  Api Id of the App element associated with the custom sidebar element
     * @param data.modelApiId -  Api Id of the model associated with the custom sidebar element
     */
    deleteCustomSidebarElement(data) {
        this.scheduledMigrations.push({ operationName: "deleteCustomSidebarElement", params: data });
    }
    /** */
    createEnumeration(data) {
        this.scheduledMigrations.push({ operationName: "createEnumeration", params: data });
    }
    /** */
    updateEnumeration(data) {
        this.scheduledMigrations.push({ operationName: "updateEnumeration", params: data });
    }
    /** */
    deleteEnumeration(data) {
        this.scheduledMigrations.push({ operationName: "deleteEnumeration", params: data });
    }
    /** */
    createStage(data) {
        this.scheduledMigrations.push({ operationName: "createStage", params: data });
    }
    /** */
    deleteStage(data) {
        this.scheduledMigrations.push({ operationName: "deleteStage", params: data });
    }
    /** */
    updateStage(data) {
        this.scheduledMigrations.push({ operationName: "updateStage", params: data });
    }
    /** */
    createLocale(data) {
        this.scheduledMigrations.push({ operationName: "createLocale", params: data });
    }
    /** */
    deleteLocale(data) {
        this.scheduledMigrations.push({ operationName: "deleteLocale", params: data });
    }
    /** */
    updateLocale(data) {
        this.scheduledMigrations.push({ operationName: "updateLocale", params: data });
    }
    /**
     * @param data.prefix -  Unique prefix that will be prepended to all of the remote types. This value cannot be changed!
     * @param data.introspectionUrl -
     *    * Specific URL that will be used for introspection if the introspection is available on another url than the regular url.
     *    * Can be ignored if the introspection url is the same as the url of the remote source.
     *
     * @param data.introspectionMethod -  HTTP method that will be used for introspection
     * @param data.introspectionHeaders -  HTTP headers that will be used for introspection
     * @param data.remoteTypeDefinitions -  Custom GraphQL input types that can be used as arguments in remote fields that belong to this remoteSource
     */
    createGraphQLRemoteSource(data) {
        this.scheduledMigrations.push({ operationName: "createGraphQLRemoteSource", params: data });
    }
    /** */
    updateGraphQLRemoteSource(data) {
        this.scheduledMigrations.push({ operationName: "updateGraphQLRemoteSource", params: data });
    }
    /** */
    refreshGraphQLRemoteSourceSchema(data) {
        this.scheduledMigrations.push({ operationName: "refreshGraphQLRemoteSourceSchema", params: data });
    }
    /**
     * @param data.prefix -  Unique prefix that will be prepended to all of the remote types. This value cannot be changed!
     * @param data.remoteTypeDefinitions -  Remote type definitions that the remote source supports or input types that can be used by any remote field of this remote source
     */
    createRESTRemoteSource(data) {
        this.scheduledMigrations.push({ operationName: "createRESTRemoteSource", params: data });
    }
    /** */
    updateRESTRemoteSource(data) {
        this.scheduledMigrations.push({ operationName: "updateRESTRemoteSource", params: data });
    }
    /** */
    deleteRemoteSource(data) {
        this.scheduledMigrations.push({ operationName: "deleteRemoteSource", params: data });
    }
    /**
     * updates config and status for an AppInstallation, only valid for App Token bearer
     * @param data.config -  App Installation config, the object passed will be merged with the existing config
     * @param data.status -  App Installation status
     */
    updateAppInstallation(data) {
        this.scheduledMigrations.push({ operationName: "updateAppInstallation", params: data });
    }
    /**
     * creates a webhook
     * @param data.models -
     *    * Pass an empty array for all existing models.
     *    * This will also setup the webhook for models
     *    * created in the future
     *
     * @param data.stages -
     *    * Pass an empty array for all existing stages.
     *    * This will also setup the webhook for stages
     *    * created in the future
     *
     */
    createWebhook(data) {
        this.scheduledMigrations.push({ operationName: "createWebhook", params: data });
    }
    /** updates a webhook */
    updateWebhook(data) {
        this.scheduledMigrations.push({ operationName: "updateWebhook", params: data });
    }
    /** deletes a webhook */
    deleteWebhook(data) {
        this.scheduledMigrations.push({ operationName: "deleteWebhook", params: data });
    }
    /** Returns all migrations that would have been sent on submit */
    dryRun() {
        return this.scheduledMigrations;
    }
    /** Apply custom schema changes, eg. output from `getEnvironmentDiff` method */
    applySchemaChanges(data) {
        this.scheduledMigrations.push(...data);
    }
    /** Returns the schema difference between the current environment and target environment as migrations */
    getEnvironmentDiff(targetEnvironment) {
        return __awaiter(this, void 0, void 0, function* () {
            let mgmtServer = process.env.MGMT_SERVER_URL;
            if (process.env.NODE_ENV === "test") {
                mgmtServer = "http://localhost:3001/graphql";
            }
            const client = new ManagementAPIClient_1.ManagementAPIClient(this.endpoint, mgmtServer || "https://management.hygraph.com/graphql", this.authToken);
            let result;
            try {
                result = yield client.getEnvironmentDiff(targetEnvironment);
            }
            catch (e) {
                return Promise.reject(e);
            }
            if (!result) {
                throw new Error(`Could not find diff for the target environment`);
            }
            const migrationResult = result
                .map((m) => Object.keys(m).map((op) => ({ operationName: op, params: m[op] })))
                .flat();
            return migrationResult;
        });
    }
    /**
     * Submits all scheduled migrations to the management server
     * @foreground Wait until the migrations are scheduled and executed. If false the migrations will be submitted, but the result won't be awaited.
     */
    run(foreground = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.wasExecuted) {
                throw new Error("Migration has already been executed");
            }
            let mgmtServer = process.env.MGMT_SERVER_URL;
            if (process.env.NODE_ENV === "test") {
                mgmtServer = "http://localhost:3001/graphql";
            }
            const client = new ManagementAPIClient_1.ManagementAPIClient(this.endpoint, mgmtServer || "https://management.hygraph.com/graphql", this.authToken);
            let info;
            try {
                info = yield client.getEnvironmentInfo();
            }
            catch (getEnvError) {
                throw getEnvError;
            }
            if (!info) {
                throw new Error(`Could not find environment for endpoint`);
            }
            const variables = {
                data: {
                    changes: this.scheduledMigrations.map((m) => ({
                        [m.operationName]: m.params,
                    })),
                    name: this.name,
                    environmentId: info.environmentId,
                },
            };
            let response;
            try {
                response = yield client.submit(variables);
                this.wasExecuted = true;
            }
            catch (submitError) {
                throw submitError;
            }
            if (!foreground) {
                return response;
            }
            const status = yield client.pollMigrationStatus({
                migrationId: response.id,
                projectId: info.projectId,
                environmentName: info.environmentName,
            });
            return status;
        });
    }
}
exports.Client = Client;
//# sourceMappingURL=Client.js.map