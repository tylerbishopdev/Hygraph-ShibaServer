"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Client_1 = require("./Client");
const ava_1 = __importDefault(require("ava"));
const nock_1 = __importDefault(require("nock"));
ava_1.default.beforeEach(() => {
    nock_1.default.cleanAll();
});
const environmentInfoResponse = {
    data: {
        viewer: {
            projects: [
                {
                    id: "123",
                    environments: [
                        {
                            id: "456",
                            name: "master",
                            endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
                        },
                    ],
                },
            ],
        },
    },
};
const submitMigrationMutationResponse = (createdAt) => ({
    data: {
        submitBatchChanges: {
            migration: {
                id: "123",
                createdAt,
                finishedAt: null,
                status: "PENDING",
                errors: null,
            },
        }
    },
});
(0, ava_1.default)("dryrun should return list of scheduled migrations", (t) => {
    const client = new Client_1.Client({
        name: "test",
        authToken: "abc",
        endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
    });
    const change = {
        apiId: "Post",
        apiIdPlural: "Posts",
        displayName: "My Post",
    };
    client.createModel(change);
    const changes = client.dryRun();
    t.deepEqual(changes, [{ operationName: "createModel", params: change }]);
});
(0, ava_1.default)("run should submit the migration when not running with foreground === false", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const createdAt = new Date();
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, environmentInfoResponse)
        .post("/graphql")
        .reply(200, submitMigrationMutationResponse(createdAt));
    const client = new Client_1.Client({
        name: "test",
        authToken: "abc",
        endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
    });
    const change = {
        apiId: "Post",
        apiIdPlural: "Posts",
        displayName: "My Post",
    };
    client.createModel(change);
    const result = yield client.run(false);
    t.deepEqual(result, {
        createdAt: createdAt.toISOString(),
        errors: null,
        finishedAt: null,
        id: "123",
        status: "PENDING",
    });
    scope.done();
}));
(0, ava_1.default)("run should submit the migration when not running with foreground === true", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const createdAt = new Date();
    const finishedAt = new Date();
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, environmentInfoResponse)
        .post("/graphql")
        .reply(200, submitMigrationMutationResponse)
        .post("/graphql")
        .reply(200, {
        data: {
            viewer: {
                project: {
                    environment: {
                        migration: {
                            id: "123",
                            createdAt,
                            finishedAt,
                            status: "DONE",
                            errors: null,
                        },
                    },
                },
            },
        },
    });
    const client = new Client_1.Client({
        name: "test",
        authToken: "abc",
        endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
    });
    const change = {
        apiId: "Post",
        apiIdPlural: "Posts",
        displayName: "My Post",
    };
    client.createModel(change);
    const result = yield client.run(true);
    t.deepEqual(result, {
        createdAt: createdAt.toISOString(),
        errors: null,
        finishedAt: finishedAt.toISOString(),
        id: "123",
        status: "DONE",
    });
    scope.done();
}));
(0, ava_1.default)("run should throw in case an error occurs", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const client = new Client_1.Client({
        name: "test",
        authToken: "abc",
        endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
    });
    const change = {
        apiId: "Post",
        apiIdPlural: "Posts",
        displayName: "My Post",
    };
    client.createModel(change);
    const err = yield t.throwsAsync(client.run(true));
    t.is(err === null || err === void 0 ? void 0 : err.message, "Could not get endpoint information: request to http://localhost:3001/graphql failed, reason: connect ECONNREFUSED 127.0.0.1:3001");
}));
(0, ava_1.default)("should not be possible to run a migration twice", (t) => __awaiter(void 0, void 0, void 0, function* () {
    const createdAt = new Date();
    const scope = (0, nock_1.default)("http://localhost:3001")
        .post("/graphql")
        .reply(200, environmentInfoResponse)
        .post("/graphql")
        .reply(200, submitMigrationMutationResponse(createdAt));
    const client = new Client_1.Client({
        name: "test",
        authToken: "abc",
        endpoint: "https://api-eu-central-1.hygraph.com/v2/foo/master",
    });
    yield client.run(false);
    const err = yield t.throwsAsync(client.run(false));
    t.is(err === null || err === void 0 ? void 0 : err.message, "Migration has already been executed");
    scope.done();
}));
//# sourceMappingURL=Client.test.js.map